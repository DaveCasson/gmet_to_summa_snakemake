from pathlib import Path
import xarray as xr
import yaml
from metsim import MetSim
import shutil

def list_files_in_subdirectory(directory, suffix_to_remove):
    path = Path(directory)
    file_paths = [file.relative_to(path).as_posix().replace(suffix_to_remove, "") for file in path.glob('**/*') if file.is_file()]
    return file_paths

input_file_suffix = '_prep.nc'
input_forcing_list = list_files_in_subdirectory(Path(config['easymore']['output_dir']), input_file_suffix)

gmet_forcing_files, = glob_wildcards(Path(config['forcing']['forcing_dir'], "{id}.nc"))

def read_metsim_base_config(settings):
    """Create metsim domain file from summa model attribute file"""

    metsim_base_path = Path(
        settings["metsim"]["metsim_base_config"]
    )
    with open(metsim_base_path) as file:
        metsim_base_config = OrderedDict(yaml.load(file, Loader=yaml.FullLoader))

    return metsim_base_config

def rename_ms_output(ms,new_file_name):
    ms_output = [ms._get_output_filename(times) for times in ms._times]

    if len(ms_output) == 1:
        ms_output_file = Path(ms_output[0])
        ms_output_file.rename(new_file_name)
    elif len(ms_output) > 1:
        output = xr.open_mfdataset(ms_output, concat_dim='time')
        output.to_netcdf(new_file_name)
    elif len(ms_output) == 0:
        raise ValueError("No output files were generated by MetSim")

def get_time_range(nc_file):
    # Open the netCDF file
    ds = xr.open_dataset(nc_file)
    # Get the time variable
    time_var = ds['time']
    # Get the start and end times
    start_time = time_var[0].values.astype('datetime64[D]').astype(str)
    end_time = time_var[-1].values.astype('datetime64[D]').astype(str)
    # Close the netCDF file
    ds.close()
    # Return the start and end times
    return start_time, end_time

def create_metsim_config(config, input_forcing_file,input_state_file,output_file):
    """Create metsim configuration file, both from master configuration file and from hardwired settings"""

    metsim_base_config = read_metsim_base_config(config)
    start_time, end_time = get_time_range(input_forcing_file)
    print(str(start_time), str(end_time))
    metsim_base_config["start"] = str(start_time)
    metsim_base_config["stop"] = str(end_time)
    metsim_base_config["out_freq"] = config['metsim']['out_freq']
    metsim_base_config["scheduler"] = "threading"
    input_forcing_str = str(input_forcing_file)
    metsim_base_config["forcing"] = input_forcing_str
    state_file_str = str(input_state_file)
    metsim_base_config["state"] = state_file_str
    metsim_base_config["domain"] = os.path.join(
        config["metsim"]["metsim_dir"], config["metsim"]["domain_nc"]
    )
    output_file_path = Path(output_file)
    metsim_base_config['out_dir'] = str(output_file_path.parent)
    metsim_base_config['time_step'] = config['metsim']['timestep_minutes']

    ms = MetSim(metsim_base_config)

    return ms

rule run_metsim:
    input:
        expand(Path(config['metsim']['metsim_output_dir'],"{id}.nc"), id=input_forcing_list)

rule generate_metsim_output:
    input:
         metsim_input_forcing = Path(config['metsim']['metsim_input_dir'],"{id}.nc"),
         metsim_input_state = Path(config['metsim']['metsim_input_dir'],"{id}_state.nc")
    output:
        metsim_output_forcing = Path(config['metsim']['metsim_output_dir'],"{id}.nc")
    run:
        ms = create_metsim_config(config, input.metsim_input_forcing,input.metsim_input_state,output.metsim_output_forcing)
        ms.run()
        rename_ms_output(ms,output.metsim_output_forcing)

